<?php
/**
 * @file AUTOGENERATED FILE â€“ DO NOT CHANGE MANUALLY
 * All your changes will get overridden. See the README for more details.
 */

namespace WordPress\Blueprints\Model\Builder;

use Swaggest\JsonSchema\Constraint\Properties;
use Swaggest\JsonSchema\Schema;
use WordPress\Blueprints\Model\DataClass\UnzipStep;
use Swaggest\JsonSchema\Structure\ClassStructureContract;


/**
 * Built from #/definitions/UnzipStep
 */
class UnzipStepBuilder extends UnzipStep implements ClassStructureContract
{
    use \Swaggest\JsonSchema\Structure\ClassStructureTrait;

    /**
     * @param Properties|static $properties
     * @param Schema $ownerSchema
     */
    public static function setUpProperties($properties, Schema $ownerSchema)
    {
        $properties->progress = ProgressBuilder::schema();
        $properties->continueOnError = Schema::boolean();
        $properties->step = Schema::string();
        $properties->step->const = "unzip";
        $properties->zipFile = new Schema();
        $properties->zipFile->anyOf[0] = Schema::string();
        $properties->zipFile->anyOf[1] = FilesystemResourceBuilder::schema();
        $properties->zipFile->anyOf[2] = InlineResourceBuilder::schema();
        $properties->zipFile->anyOf[3] = CoreThemeResourceBuilder::schema();
        $properties->zipFile->anyOf[4] = CorePluginResourceBuilder::schema();
        $properties->zipFile->anyOf[5] = UrlResourceBuilder::schema();
        $properties->zipFile->setFromRef('#/definitions/FileReference');
        $properties->zipPath = Schema::string();
        $properties->zipPath->description = "The path of the zip file to extract";
        $properties->extractToPath = Schema::string();
        $properties->extractToPath->description = "The path to extract the zip file to";
        $properties->pathInZip = Schema::arr();
        $properties->pathInZip->items = Schema::string();
        $properties->pathInZip->description = "The path to extract from the zip file. The first item in the array will be tried, and if it doesn't exist, the next item will be tried, and so on.";
        $properties->pathInZip->default = [];
        $ownerSchema->type = Schema::OBJECT;
        $ownerSchema->additionalProperties = false;
        $ownerSchema->required = array(
            self::names()->extractToPath,
            self::names()->step,
        );
        $ownerSchema->setFromRef('#/definitions/UnzipStep');
    }

    /**
     * @param ProgressBuilder $progress
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setProgress(ProgressBuilder $progress)
    {
        $this->progress = $progress;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param bool $continueOnError
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setContinueOnError($continueOnError)
    {
        $this->continueOnError = $continueOnError;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $step
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setStep($step)
    {
        $this->step = $step;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string|FilesystemResourceBuilder|InlineResourceBuilder|CoreThemeResourceBuilder|CorePluginResourceBuilder|UrlResourceBuilder $zipFile
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setZipFile($zipFile)
    {
        $this->zipFile = $zipFile;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $zipPath The path of the zip file to extract
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setZipPath($zipPath)
    {
        $this->zipPath = $zipPath;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $extractToPath The path to extract the zip file to
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setExtractToPath($extractToPath)
    {
        $this->extractToPath = $extractToPath;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string[]|array $pathInZip The path to extract from the zip file. The first item in the array will be tried, and if it doesn't exist, the next item will be tried, and so on.
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setPathInZip($pathInZip)
    {
        $this->pathInZip = $pathInZip;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    function toDataObject()
    {
        $dataObject = new UnzipStep();
        $dataObject->progress = $this->recursiveJsonSerialize($this->progress);
        $dataObject->continueOnError = $this->recursiveJsonSerialize($this->continueOnError);
        $dataObject->step = $this->recursiveJsonSerialize($this->step);
        $dataObject->zipFile = $this->recursiveJsonSerialize($this->zipFile);
        $dataObject->zipPath = $this->recursiveJsonSerialize($this->zipPath);
        $dataObject->extractToPath = $this->recursiveJsonSerialize($this->extractToPath);
        $dataObject->pathInZip = $this->recursiveJsonSerialize($this->pathInZip);
        return $dataObject;
    }

    /**
     * @param mixed $objectMaybe
     */
    private function recursiveJsonSerialize($objectMaybe)
    {
        if ( is_array( $objectMaybe ) ) {
        	return array_map([$this, 'recursiveJsonSerialize'], $objectMaybe);
        } elseif ( $objectMaybe instanceof \Swaggest\JsonSchema\Structure\ClassStructureContract ) {
        	return $objectMaybe->toDataObject();
        } else {
        	return $objectMaybe;
        }
    }
}